op 

model EventGridEvent {
    @doc("An unique identifier for the event.")
    id: string,
    @doc("The resource path of the event source.")
    topic: string,
    @doc("A resource path relative to the topic path.")
    subject: string,
    @doc("Event data specific to the event type.")
    /* TODO(ellismg): this was just `object` in the swagger" */
    data: Map<string, string>,
    @doc("The type of the event that occurred.")
    eventType: string,
    @doc("The time (in UTC) the event was generated.")
    eventTime: zonedDateTime,
    @doc("The schema version of the event metadata.")
    metadataVersion: string,
    @doc("The schema version of the data object.")
    dataVersion: string,
}

// TODO(ellismg): This had `additionalProperties: true`
model CloudEventEvent {
    @doc("An identifier for the event. The combination of id and source must be unique for each distinct event.")
    id: string,
    @doc("Identifies the context in which an event happened. The combination of id and source must be unique for each distinct event.")
    source: string,
    @doc("Event data specific to the event type.")
    /* TODO(ellismg): this was just `object` in the swagger */
    data: Map<string, string>,
    @doc("Event data specific to the event type, encoded as a base64 string.")
    /* TODO(ellismg): this had `format: byte` */
    data_base64: string,
    @doc("Type of event related to the originating occurrence.")
    type: string,
    @doc("The time (in UTC) the event was generated, in RFC3339 format.")
    time: zonedDateTime,
    @doc("The version of the CloudEvents specification which the event uses.")
    specversion: string,
    @doc("Identifies the schema that data adheres to.")
    dataschema: string,
    @doc("Content type of data value.")
    datacontenttype: string,
    @doc("This describes the subject of the event in the context of the event producer (identified by source).")
    subject: string,
}

// TODO(ellismg): This had `additionalProperties: true`
model CustomEventEvent {}

model SubscriptionValidationEventData {
    @doc("""
    The validation code sent by Azure Event Grid to validate an event subscription. To complete the validation handshake, 
    the subscriber must either respond with this validation code as part of the validation response, or perform 
    a GET request on the validationUrl (available starting version 2018-05-01-preview).
    """)
    validationCode: string,
    @doc("""
    The validation URL sent by Azure Event Grid (available starting version 2018-05-01-preview). To complete the validation
     handshake, the subscriber must either respond with the validationCode as part of the validation response,
    or perform a GET request on the validationUrl (available starting version 2018-05-01-preview).
    """)
    validationUrl: string,
}

model SubscriptionValidationResponse {
    @doc("The validation response sent by the subscriber to Azure Event Grid to complete the validation of an event subscription.")
    validationResponse: string,
}

model SubscriptionDeletedEventData {
    @doc("The Azure resource ID of the deleted event subscription.")
    eventSubscriptionId: string,
}

op PublishEventGridEvents (events: EventGridEvent[])
op PublishCloudEvents(events: CloudEventEvent[])
op PublishCustomEvents(events: CustomEvent[])