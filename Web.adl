// https://github.com/Azure/azure-rest-api-specs/blob/master/specification/eventgrid/data-plane/Microsoft.Web/stable/2018-01-01/Web.json

// @eventType("Microsoft.Web.AppUpdated")
model WebAppUpdatedEventData {
    appEventTypeDetail: AppEventTypeDetail,
    @doc("name of the web site that had this event.")
    name: string,
    @doc("The client request id generated by the app service for the site API operation that triggered this event.")
    clientRequestId: string,
    @doc("The correlation request id generated by the app service for the site API operation that triggered this event.")
    correlationRequestId: string,
    @doc("The request id generated by the app service for the site API operation that triggered this event.")
    requestId: string,
    @doc("HTTP request URL of this operation.")
    address: string,
    @doc("HTTP verb of this operation.")
    verb: string,
}

// @eventType("Microsoft.Web.BackupOperationStarted")
model WebBackupOperationStartedEventData {
    appEventTypeDetail: AppEventTypeDetail,
    @doc("name of the web site that had this event.")
    name: string,
    @doc("The client request id generated by the app service for the site API operation that triggered this event.")
    clientRequestId: string,
    @doc("The correlation request id generated by the app service for the site API operation that triggered this event.")
    correlationRequestId: string,
    @doc("The request id generated by the app service for the site API operation that triggered this event.")
    requestId: string,
    @doc("HTTP request URL of this operation.")
    address: string,
    @doc("HTTP verb of this operation.")
    verb: string,
}

// @eventType("Microsoft.Web.BackupOperationCompleted")
model WebBackupOperationCompletedEventData {
    appEventTypeDetail: AppEventTypeDetail,
    @doc("name of the web site that had this event.")
    name: string,
    @doc("The client request id generated by the app service for the site API operation that triggered this event.")
    clientRequestId: string,
    @doc("The correlation request id generated by the app service for the site API operation that triggered this event.")
    correlationRequestId: string,
    @doc("The request id generated by the app service for the site API operation that triggered this event.")
    requestId: string,
    @doc("HTTP request URL of this operation.")
    address: string,
    @doc("HTTP verb of this operation.")
    verb: string,
}

// @eventType("Microsoft.Web.BackupOperationFailed")
model WebBackupOperationFailedEventData {
    appEventTypeDetail: AppEventTypeDetail,
    @doc("name of the web site that had this event.")
    name: string,
    @doc("The client request id generated by the app service for the site API operation that triggered this event.")
    clientRequestId: string,
    @doc("The correlation request id generated by the app service for the site API operation that triggered this event.")
    correlationRequestId: string,
    @doc("The request id generated by the app service for the site API operation that triggered this event.")
    requestId: string,
    @doc("HTTP request URL of this operation.")
    address: string,
    @doc("HTTP verb of this operation.")
    verb: string,
}

// @eventType("Microsoft.Web.RestoreOperationStarted")
model WebRestoreOperationStartedEventData {
    appEventTypeDetail: AppEventTypeDetail,
    @doc("name of the web site that had this event.")
    name: string,
    @doc("The client request id generated by the app service for the site API operation that triggered this event.")
    clientRequestId: string,
    @doc("The correlation request id generated by the app service for the site API operation that triggered this event.")
    correlationRequestId: string,
    @doc("The request id generated by the app service for the site API operation that triggered this event.")
    requestId: string,
    @doc("HTTP request URL of this operation.")
    address: string,
    @doc("HTTP verb of this operation.")
    verb: string,
}

// @eventType("Microsoft.Web.RestoreOperationCompleted")
model WebRestoreOperationCompletedEventData {
    appEventTypeDetail: AppEventTypeDetail,
    @doc("name of the web site that had this event.")
    name: string,
    @doc("The client request id generated by the app service for the site API operation that triggered this event.")
    clientRequestId: string,
    @doc("The correlation request id generated by the app service for the site API operation that triggered this event.")
    correlationRequestId: string,
    @doc("The request id generated by the app service for the site API operation that triggered this event.")
    requestId: string,
    @doc("HTTP request URL of this operation.")
    address: string,
    @doc("HTTP verb of this operation.")
    verb: string,
}

// @eventType("Microsoft.Web.RestoreOperationFailed")
model WebRestoreOperationFailedEventData {
    appEventTypeDetail: AppEventTypeDetail,
    @doc("name of the web site that had this event.")
    name: string,
    @doc("The client request id generated by the app service for the site API operation that triggered this event.")
    clientRequestId: string,
    @doc("The correlation request id generated by the app service for the site API operation that triggered this event.")
    correlationRequestId: string,
    @doc("The request id generated by the app service for the site API operation that triggered this event.")
    requestId: string,
    @doc("HTTP request URL of this operation.")
    address: string,
    @doc("HTTP verb of this operation.")
    verb: string,
}

// @eventType("Microsoft.Web.SlotSwapStarted")
model WebSlotSwapStartedEventData {
    appEventTypeDetail: AppEventTypeDetail,
    @doc("name of the web site that had this event.")
    name: string,
    @doc("The client request id generated by the app service for the site API operation that triggered this event.")
    clientRequestId: string,
    @doc("The correlation request id generated by the app service for the site API operation that triggered this event.")
    correlationRequestId: string,
    @doc("The request id generated by the app service for the site API operation that triggered this event.")
    requestId: string,
    @doc("HTTP request URL of this operation.")
    address: string,
    @doc("HTTP verb of this operation.")
    verb: string,
}

// @eventType("Microsoft.Web.SlotSwapCompleted")
model WebSlotSwapCompletedEventData {
    appEventTypeDetail: AppEventTypeDetail,
    @doc("name of the web site that had this event.")
    name: string,
    @doc("The client request id generated by the app service for the site API operation that triggered this event.")
    clientRequestId: string,
    @doc("The correlation request id generated by the app service for the site API operation that triggered this event.")
    correlationRequestId: string,
    @doc("The request id generated by the app service for the site API operation that triggered this event.")
    requestId: string,
    @doc("HTTP request URL of this operation.")
    address: string,
    @doc("HTTP verb of this operation.")
    verb: string,
}

// @eventType("Microsoft.Web.SlotSwapFailed")
model WebSlotSwapFailedEventData {
    appEventTypeDetail: AppEventTypeDetail,
    @doc("name of the web site that had this event.")
    name: string,
    @doc("The client request id generated by the app service for the site API operation that triggered this event.")
    clientRequestId: string,
    @doc("The correlation request id generated by the app service for the site API operation that triggered this event.")
    correlationRequestId: string,
    @doc("The request id generated by the app service for the site API operation that triggered this event.")
    requestId: string,
    @doc("HTTP request URL of this operation.")
    address: string,
    @doc("HTTP verb of this operation.")
    verb: string,
}

// @eventType("Microsoft.Web.SlotSwapWithPreviewStarted")
model WebSlotSwapWithPreviewStartedEventData {
    appEventTypeDetail: AppEventTypeDetail,
    @doc("name of the web site that had this event.")
    name: string,
    @doc("The client request id generated by the app service for the site API operation that triggered this event.")
    clientRequestId: string,
    @doc("The correlation request id generated by the app service for the site API operation that triggered this event.")
    correlationRequestId: string,
    @doc("The request id generated by the app service for the site API operation that triggered this event.")
    requestId: string,
    @doc("HTTP request URL of this operation.")
    address: string,
    @doc("HTTP verb of this operation.")
    verb: string,
}

// @eventType("Microsoft.Web.SlotSwapWithPreviewCancelled")
model WebSlotSwapWithPreviewCancelledEventData {
    appEventTypeDetail: AppEventTypeDetail,
    @doc("name of the web site that had this event.")
    name: string,
    @doc("The client request id generated by the app service for the site API operation that triggered this event.")
    clientRequestId: string,
    @doc("The correlation request id generated by the app service for the site API operation that triggered this event.")
    correlationRequestId: string,
    @doc("The request id generated by the app service for the site API operation that triggered this event.")
    requestId: string,
    @doc("HTTP request URL of this operation.")
    address: string,
    @doc("HTTP verb of this operation.")
    verb: string,
}

// @eventType("Microsoft.Web.AppServicePlanUpdated")
model WebAppServicePlanUpdatedEventData {
    appServicePlanEventTypeDetail: AppServicePlanEventTypeDetail,
    @doc("sku of app service plan.")
    sku: Map<string, string>,
    @doc("name of the app service plan that had this event.")
    name: string,
    @doc("The client request id generated by the app service for the app service plan API operation that triggered this event.")
    clientRequestId: string,
    @doc("The correlation request id generated by the app service for the app service plan API operation that triggered this event.")
    correlationRequestId: string,
    @doc("The request id generated by the app service for the app service plan API operation that triggered this event.")
    requestId: string,
    @doc("HTTP request URL of this operation.")
    address: string,
    @doc("HTTP verb of this operation.")
    verb: string,
}

model AppAction = "Restarted" | "Stopped" | "ChangedAppSettings" | "Started" | "Completed" | "Failed";

model StampKind = "Public" | "AseV1" | "AseV2";

model AppServicePlanAction = "Updated";

model AsyncStatus = "Started" | "Completed" | "Failed";

model AppEventTypeDetail {
    @doc("Type of action of the operation.")
    action: AppAction
}

model AppServicePlanEventTypeDetail {
    @doc("Kind of environment where app service plan is.")
    stampKind: StampKind,
    @doc("Type of action on the app service plan.")
    action: AppServicePlanAction,
    @doc("Asynchronous operation status of the operation on the app service plan.")
    status: AsyncStatus
}