// https://github.com/Azure/azure-rest-api-specs/blob/93e71ddc610824711d52b364103d7bea18ddb1d6/specification/eventgrid/data-plane/Microsoft.Devices/stable/2018-01-01/IotHub.json

// @eventType("Microsoft.Devices.DeviceCreated")
model IotHubDeviceCreatedEventData = DeviceLifeCycleEventProperties;

// @eventType("Microsoft.Devices.DeviceDeleted")
model IotHubDeviceDeletedEventData = DeviceLifeCycleEventProperties;

// @eventType("Microsoft.Devices.DeviceConnected")
model IotHubDeviceConnectedEventData = DeviceConnectionStateEventProperties;

// @eventType("Microsoft.Devices.DeviceDisconnected")
model IotHubDeviceDisconnectedEventData = DeviceConnectionStateEventProperties;

// @eventType("Microsoft.Devices.DeviceTelemetry")
model IotHubDeviceTelemetryEventData {
    @doc("The content of the message from the device.")
    // TODO(ellismg): This was "object" and can be any arbitrary JSON object per the swagger.
    body: Map<string, string>,
    @doc("Application properties are user-defined strings that can be added to the message. These fields are optional.")
    properties: Map<string, string>,
    @doc("System properties help identify contents and source of the messages.")
    systemProperties: Map<string, string>
}

model DeviceLifeCycleEventProperties {
    @doc("The unique identifier of the device. This case-sensitive string can be up to 128 characters long, and supports ASCII 7-bit alphanumeric characters plus the following special characters: - : . + % _ &#35; * ? ! ( ) , = @ ; $ '.\"")
    deviceId: string,
    @doc("Name of the IoT Hub where the device was created or deleted.")
    hubName: string,
    @doc("Information about the device twin, which is the cloud representation of application device metadata.")
    twin: DeviceTwinInfo,    
}

model DeviceConnectionStateEventProperties {
    @doc("The unique identifier of the device. This case-sensitive string can be up to 128 characters long, and supports ASCII 7-bit alphanumeric characters plus the following special characters: - : . + % _ &#35; * ? ! ( ) , = @ ; $ '.\"")
    deviceId: string,
    @doc("The unique identifier of the module. This case-sensitive string can be up to 128 characters long, and supports ASCII 7-bit alphanumeric characters plus the following special characters: - : . + % _ &#35; * ? ! ( ) , = @ ; $ '.\"")
    moduleId: string,
    @doc("Name of the IoT Hub where the device was created or deleted.")
    hubName: string,
    @doc("Information about the device connection state event.")
    deviceConnectionStateEventInfo: DeviceConnectionStateEventInfo
}

model DeviceTwinInfo {
    @doc("Authentication type used for this device: either SAS, SelfSigned, or CertificateAuthority.")
    authenticationType: string,
    // NOTE(ellismg): In the source swagger this was just "number".
    @doc("Count of cloud to device messages sent to this device.")
    cloudToDeviceMessageCount: safeint,
    @doc("Whether the device is connected or disconnected.")
    connectionState: string,
    @doc("The unique identifier of the device twin.")
    deviceId: string,
    @doc("A piece of information that describes the content of the device twin. Each etag is guaranteed to be unique per device twin.")
    etag: string,
    @doc("The ISO8601 timestamp of the last activity.")
    lastActivityTime: string,
    @doc("Properties JSON element.")
    properties: {
        desired: DeviceTwinProperties,
        reported: DeviceTwinProperties
    },
    @doc("Whether the device twin is enabled or disabled.")
    status: string,
    @doc("the ISO8601 timestamp of the last device twin status update.")
    statusUpdateTime: string,
    // NOTE(ellismg): In the source swagger this was just "number".
    version: safeint,
    @doc("""
    Thumbprint is a unique value for the x509 certificate, commonly used to find a particular certificate in a certificate store. 
    The thumbprint is dynamically generated using the SHA1 algorithm, and does not physically exist in the certificate.
    """)
    x509Thumbprint: {
        @doc("Primary thumbprint for the x509 certificate.")
        primaryThumbprint: string,
        @doc("Secondary thumbprint for the x509 certificate.")
        secondaryThumbprint: string,
    }
}

// TODO(ellismg): How do we denote x-ms-client-names here? Also: is the source swagger correctly using x-ms-client-name (it feels like it's taking "good" names and making them "bad"?)
model DeviceTwinProperties {
    @doc("Metadata information for the properties JSON document.")
    metadata: DeviceTwinMetadata,
    @doc("Version of device twin properties.")
    // NOTE(ellismg): In the source swagger this was just "number".
    version: safeint
}

// TODO(ellismg): How do we denote x-ms-client-names here? Also: is the source swagger correctly using x-ms-client-name (it feels like it's taking "good" names and making them "bad"?)
model DeviceTwinMetadata {
    @doc("The ISO8601 timestamp of the last time the properties were updated.")
    lastUpdated: string,
}

// NOTE(ellismg): Should this model be "inlined" into DeviceConnectionStateEventProperties?
model DeviceConnectionStateEventInfo {
    @doc("""
    Sequence number is string representation of a hexadecimal number. string compare can be used to identify the larger number because both 
    in ASCII and HEX numbers come after alphabets. If you are converting the string to hex, then the number is a 256 bit number.
    """)
    sequenceNumber: string
}