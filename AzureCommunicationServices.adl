// https://github.com/Azure/azure-rest-api-specs/blob/ce463ad13c3e4d0c7ea182672d0c02c75ccaf678/specification/eventgrid/data-plane/Microsoft.Communication/stable/2018-01-01/AzureCommunicationServices.json

// @eventType("Microsoft.Communication.ChatMessageReceived")
model AcsChatMessageReceivedEventData {
    ...AcsChatMessageEventBaseProperties,
    @doc("The body of the chat message")
    messageBody: string,
}

// @eventType("Microsoft.Communication.ChatMessageReceivedInThread")
model AcsChatMessageReceivedInThreadEventData {
    ...AcsChatMessageEventInThreadBaseProperties,
    @doc("The body of the chat message")
    messageBody: string,
}

// @eventType("Microsoft.Communication.ChatMessageEdited")
model AcsChatMessageEditedEventData {
    ...AcsChatMessageEventBaseProperties,
    @doc("The body of the chat message")
    messageBody: string,
    @doc("The time at which the message was edited")
    editTime: zonedDateTime,
}

// @eventType("Microsoft.Communication.ChatMessageEditedInThread")
model AcsChatMessageEditedInThreadEventData {
    ...AcsChatMessageEventInThreadBaseProperties,
    @doc("The body of the chat message")
    messageBody: string,
    @doc("The time at which the message was edited")
    editTime: zonedDateTime,
}

// @eventType("Microsoft.Communication.ChatMessageDeleted")
model AcsChatMessageDeletedEventData {
    ...AcsChatMessageEventBaseProperties,
    @doc("The time at which the message was deleted")
    deleteTime: zonedDateTime,
}

// @eventType("Microsoft.Communication.ChatMessageDeletedInThread")
model AcsChatMessageDeletedInThreadEventData {
    ...AcsChatMessageEventInThreadBaseProperties,
    @doc("The time at which the message was deleted")
    deleteTime: zonedDateTime,
}

// @eventType("Microsoft.Communication.ChatThreadCreatedWithUser")
model AcsChatThreadCreatedWithUserEventData {
    ...AcsChatThreadEventBaseProperties,
    @doc("The communication identifier of the user who created the thread")
    createdByCommunicationIdentifier: CommunicationIdentifierModel,
    @doc("The thread properties")
    // NOTE(ellismg): This was just "object" in the swagger
    properties: Map<string, string>,
    @doc("The list of properties of participants who are part of the thread")
    participants: AcsChatThreadParticipantProperties[],
}

// @eventType("Microsoft.Communication.ChatThreadCreated")
model AcsChatThreadCreatedEventData {
    ...AcsChatThreadEventInThreadBaseProperties,
    @doc("The communication identifier of the user who created the thread")
    createdByCommunicationIdentifier: CommunicationIdentifierModel,
    @doc("The thread properties")
    // NOTE(ellismg): This was just "object" in the swagger
    properties: Map<string, string>,
    @doc("The list of properties of participants who are part of the thread")
    participants: AcsChatThreadParticipantProperties[],
}

// @eventType("Microsoft.Communication.ChatThreadWithUserDeleted")
model AcsChatThreadWithUserDeletedEventData {
    ...AcsChatThreadEventBaseProperties,
    @doc("The communication identifier of the user who deleted the thread")
    deletedByCommunicationIdentifier: CommunicationIdentifierModel,
    @doc("The deletion time of the thread")
    deleteTime: zonedDateTime,
}

// @eventType("Microsoft.Communication.ChatThreadDeleted")
model AcsChatThreadDeletedEventData {
    ...AcsChatThreadEventInThreadBaseProperties,
    @doc("The communication identifier of the user who deleted the thread")
    deletedByCommunicationIdentifier: CommunicationIdentifierModel,
    @doc("The deletion time of the thread")
    deleteTime: zonedDateTime,
}

// @eventType("Microsoft.Communication.ChatThreadPropertiesUpdatedPerUser")
model AcsChatThreadPropertiesUpdatedPerUserEventData {
    ...AcsChatThreadEventBaseProperties,
    @doc("The communication identifier of the user who updated the thread properties")
    editedByCommunicationIdentifier: CommunicationIdentifierModel,
    @doc("The time at which the properties of the thread were updated")
    editTime: zonedDateTime,
    @doc("The updated thread properties")
    // NOTE(ellismg): This was just "object" in the swagger
    properties: Map<string, string>,
}

// @eventType("Microsoft.Communication.ChatThreadPropertiesUpdated")
model AcsChatThreadPropertiesUpdatedEventData {
    ...AcsChatThreadEventInThreadBaseProperties,
    @doc("The communication identifier of the user who updated the thread properties")
    editedByCommunicationIdentifier: CommunicationIdentifierModel,
    @doc("The time at which the properties of the thread were updated")
    editTime: zonedDateTime,
    @doc("The updated thread properties")
    // NOTE(ellismg): This was just "object" in the swagger
    properties: Map<string, string>,
}

// @eventType("Microsoft.Communication.ChatParticipantAddedToThreadWithUser")
model AcsChatParticipantAddedToThreadWithUserEventData {
    ...AcsChatThreadEventBaseProperties,
    @doc("The time at which the user was added to the thread")
    time: zonedDateTime,
    @doc("The communication identifier of the user who added the user")
    addedByCommunicationIdentifier: CommunicationIdentifierModel,
    @doc("The details of the user who was added")
    participantAdded: AcsChatThreadParticipantProperties,
}

// @eventType("Microsoft.Communication.ChatParticipantRemovedFromThreadWithUser")
model AcsChatParticipantRemovedFromThreadWithUserEventData {
    ...AcsChatThreadEventBaseProperties,
    @doc("The time at which the user was removed to the thread")
    time: zonedDateTime,
    @doc("The communication identifier of the user who removed the user")
    removedByCommunicationIdentifier: CommunicationIdentifierModel,
    @doc("The details of the user who was removed")
    participantRemoved: AcsChatThreadParticipantProperties,
}

// @eventType("Microsoft.Communication.ChatThreadParticipantAdded")
model AcsChatParticipantAddedToThreadEventData {
    ...AcsChatEventInThreadBaseProperties,
    @doc("The time at which the user was added to the thread")
    time: zonedDateTime,
    @doc("The communication identifier of the user who added the user")
    addedByCommunicationIdentifier: CommunicationIdentifierModel,
    @doc("The details of the user who was added")
    participantAdded: AcsChatThreadParticipantProperties,
    @doc("The version of the thread")
    version: int64,
}

// @eventType("Microsoft.Communication.ChatThreadParticipantRemoved")
model AcsChatParticipantRemovedFromThreadEventData {
    ...AcsChatEventInThreadBaseProperties,
    @doc("The time at which the user was removed to the thread")
    time: zonedDateTime,
    @doc("The communication identifier of the user who removed the user")
    removedByCommunicationIdentifier: CommunicationIdentifierModel,
    @doc("The details of the user who was removed")
    participantRemoved: AcsChatThreadParticipantProperties,
    @doc("The version of the thread")
    version: int64,
}

// @eventType("Microsoft.Communication.SMSDeliveryReportReceived")
model AcsSmsDeliveryReportReceivedEventData {
    ...AcsSmsEventBaseProperties,
    @doc("Status of Delivery")
    deliveryStatus: string,
    @doc("Details about Delivery Status")
    deliveryStatusDetails: string,
    @doc("List of details of delivery attempts made")
    deliveryAttempts: AcsSmsDeliveryAttemptProperties[],
    @doc("The time at which the SMS delivery report was received")
    receivedTimestamp: zonedDateTime,
    @doc("Customer Content")
    tag: string,
}

// @eventType("Microsoft.Communication.SMSReceived")
model AcsSmsReceivedEventData {
    ...AcsSmsEventBaseProperties,
    @doc("The SMS content")
    message: string,
    @doc("The time at which the SMS was received")
    receivedTimestamp: zonedDateTime,
}

// @eventType("Microsoft.Communication.RecordingFileStatusUpdated")
model AcsRecordingFileStatusUpdatedEventData {
    @doc("The details of recording storage information")
    recordingStorageInfo: AcsRecordingStorageInfoProperties,
    @doc("The time at which the recording started")
    recordingStartTime: zonedDateTime,
    @doc("The recording duration in milliseconds")
    recordingDurationMs: int64,
    @doc("The reason for ending recording session")
    sessionEndReason: string,
}

model AcsChatThreadEventBaseProperties {
    ...AcsChatEventBaseProperties,
    @doc("The original creation time of the thread")
    createTime: zonedDateTime,
    @doc("The version of the thread")
    version: int64,
}

model AcsChatThreadEventInThreadBaseProperties {
    ...AcsChatEventInThreadBaseProperties,
    @doc("The original creation time of the thread")
    createTime: zonedDateTime,
    @doc("The version of the thread")
    version: int64,
}

model AcsChatMessageEventBaseProperties {
    ...AcsChatEventBaseProperties,
    @doc("The chat message id")
    messageId: string,
    @doc("The communication identifier of the sender")
    senderCommunicationIdentifier: CommunicationIdentifierModel,
    @doc("The display name of the sender")
    senderDisplayName: string,
    @doc("The original compose time of the message")
    composeTime: zonedDateTime,
    @doc("The type of the message")
    type: string,
    @doc("The version of the message")
    version: int64,
}

model AcsChatMessageEventInThreadBaseProperties {
    ...AcsChatEventInThreadBaseProperties,
    @doc("The chat message id")
    messageId: string,
    @doc("The communication identifier of the sender")
    senderCommunicationIdentifier: CommunicationIdentifierModel,
    @doc("The display name of the sender")
    senderDisplayName: string,
    @doc("The original compose time of the message")
    composeTime: zonedDateTime,
    @doc("The type of the message")
    type: string,
    @doc("The version of the message")
    version: int64,
}

model AcsChatEventInThreadBaseProperties {
    @doc("The transaction id will be used as co-relation vector")
    transactionId: string,
    @doc("The chat thread id")
    threadId: string,
}

model AcsChatEventBaseProperties {
    @doc("The communication identifier of the target user")
    recipientCommunicationIdentifier: CommunicationIdentifierModel,
    @doc("The transaction id will be used as co-relation vector")
    transactionId: string,
    @doc("The chat thread id")
    threadId: string,
}

model AcsChatThreadParticipantProperties {
    @doc("The name of the user")
    displayName: string,
    @doc("The communication identifier of the user")
    participantCommunicationIdentifier: CommunicationIdentifierModel,
}

model AcsSmsEventBaseProperties {
    @doc("The identity of the SMS message")
    messageId: string,
    @doc("The identity of SMS message sender")
    from: string,
    @doc("The identity of SMS message receiver")
    to: string,
}

model AcsSmsDeliveryAttemptProperties {
    @doc("TimeStamp when delivery was attempted")
    timestamp: zonedDateTime,
    @doc("Number of segments that were successfully delivered")
    segmentsSucceeded: int32,
    @doc("Number of segments whose delivery failed")
    segmentsFailed: int32,
}

model AcsRecordingStorageInfoProperties {
    @doc("List of details of recording chunks information")
    recordingChunks: AcsRecordingChunkInfoProperties[],
}

model AcsRecordingChunkInfoProperties {
    @doc("The documentId of the recording chunk")
    documentId: string,
    @doc("The index of the recording chunk")
    index: int64,
    @doc("The reason for ending the recording chunk")
    endReason: string,
}

model CommunicationIdentifierModel {
    @doc("Raw Id of the identifier. Optional in requests, required in responses.")
    rawId: string,
    @doc("The communication user.")
    communicationUser: CommunicationUserIdentifierModel,
    @doc("The phone number.")
    phoneNumber: PhoneNumberIdentifierModel,
    @doc("The Microsoft Teams user.")
    microsoftTeamsUser: MicrosoftTeamsUserIdentifierModel,
}

model CommunicationUserIdentifierModel {
    @doc("The Id of the communication user.")
    id: string,
}

model PhoneNumberIdentifierModel {
    @doc("The phone number in E.164 format.")
    value: string,
}

model MicrosoftTeamsUserIdentifierModel {
    @doc("The Id of the Microsoft Teams user. If not anonymous, this is the AAD object Id of the user.")
    userId: string,
    @doc("True if the Microsoft Teams user is anonymous. By default false if missing.")
    isAnonymous: boolean,
    @doc("The cloud that the Microsoft Teams user belongs to. By default 'public' if missing.")
    cloud: CommunicationCloudEnvironmentModel,
}

model CommunicationCloudEnvironmentModel = "public" | "dod" | "gcch";